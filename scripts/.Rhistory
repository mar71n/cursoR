retval <- 1 - prod(c(365:(365-n+1))) / (365^n)
retval
}
cumple(c(1:100))
plot(cumple(c(1:100)))
c(1:100)
prod(c(365:(365-5)))
c(365:(365-5))
cumple <- function(n){
retval <- 1 - ( prod(c(365:(365-n+1))) / (365^n) )
retval
}
cumple(c(1:100))
cumple <- function(n){
retval <- ( prod(c(365:(365-n))) / (365^n) )
retval
}
cumple(c(1:100))
plot(cumple(c(1:100)))
cumple <- function(n){
retval <- 1 - ( prod(c(365:(365-n))) / (365^n) )
retval
}
plot(cumple(c(1:100)))
2^3
cumple <- function(n){
print c(365:(365-n))
retval <- ( prod(c(365:(365-n))) / (365^n) )
retval
}
cumple <- function(n){
c(365:(365-n))
retval <- ( prod(c(365:(365-n))) / (365^n) )
retval
}
cumple(c(1:100))
cumple <- function(n){
c(365:(365-n))
retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(c(1:100))
cumple <- function(n){
c(365:(365-n))
#retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(c(1:100))
c(365:(365-5)
)
cumple <- function(n){
c(365:(365-n))
#retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(c(1:100))
cumple(c(1:100))
(c(365:(365-5)))
cumple
cumple <- function(n){
c(365:(365-n))
#retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(c(1:10))
warnings
warnings()
warnings()
cumple(c(1:10))
warnings()
cumple <- function(n){
print() c(365:(365-n)))
#retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple <- function(n){
print( c(365:(365-n)))
#retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(c(1:10))
cumple(6)
cumple <- function(n){
print( c(365:(365-n)))
retval <- ( prod(c(365:(365-n))) / (365^n) )
}
cumple(6)
cumple <- function(n){
print( c(365:(365-n)))
retval <- ( prod(c(365:(365-n))) / (365^n) )
return(retval)
}
cumple(6)
cumple <- function(n){
print( c(365:(365-n+1)))
retval <- ( prod(c(365:(365-n+1))) / (365^n) )
return(retval)
}
cumple(6)
cumple <- function(n){
print( c(365:(365-n+1)))
retval <- 1 - ( prod(c(365:(365-n+1))) / (365^n) )
return(retval)
}
cumple(6)
cumple(c(1:10))
cumple <- function(n){
#print( c(365:(365-n+1)))
retval <- 1 - ( prod(c(365:(365-n+1))) / (365^n) )
return(retval)
}
cumple(c(1:10))
cumple <- function(n){
1 - ( prod(c(365:(365-n+1))) / (365^n) )
}
cumple(c(1:10))
cumple(10))
cumple(10)
plot(cumple(c(1:100)))
cumple(10)
cumple(22)
cumple <- function(n){
1 - ( prod(c(365:(365-n))) / (365^n) )
}
cumple(22)
cumple <- function(n){
1 - ( prod(c(365:(364-n))) / (365^n) )
}
cumple(22)
cumple <- function(n){
1 - ( prod(c(365:(365-n+1))) / (365^n) )
}
cumple(22)
cumple(23)
cumple(1:23)
cumple(1:50)
cumple(23)
cumple(23)
??iterar
??iterarate
??iterate
cumple(23)
cumple <- function(n){ 1 - ( prod(c(365:(365-n+1))) / (365^n) )}
cumple(23)
cumple(c(1:23))
exp(1)
exp(2)
exp(1:2)
exp(1:3)
dados(c(1:100))
plot(dados(c(1:100)))
cumple <- function(n){
return(1 - ( prod(c(365:(365-n+1))) / (365^n) ))
}
cumple(1:3)
cumple(1)
cumple(2)
prod(1:3)
prod(3:3)
prod(3:5)
prod(c(3:5)
prod(c(3:5))
prod(c(3:5))
cumple <- function(n){
return(1 - ( prod(365:(365-n+1)) / (365^n) ))
}
cumple(2)
cumple(23)
cumple(1:10)
dados(1:10)
cumple <- function(n){
return (1 - ( prod(365:(365-n+1)) / (365^n) ))
}
cumple(23)
cumple(1:10)
1:10
?for
?for()
?for
for (j in c(1:10)){
cumple(j)
}
for (j in c(1:10)){
print(cumple(j))
}
for (j in c(1:25)){
print(cumple(j))
}
a <- c()
for (j in c(1:25)){
append(a,cumple(j))
}
a
a <- c()
for (j in c(1:25)){
a<<-append(a,cumple(j))
}
a
plot(a)
a <- c()
for (j in c(1:100)){
a<<-append(a,cumple(j))
}
plot(a)
plot(dados(c(1:100)))
plot(a)
palabras <- c(strsplit(quijote[37:37862],"[ ,;-]"),recursive=T)
palabras[1:100]
palabras_ordenadas_x_ocurrencia <- sort(table(palabras),vars=2,decreasing=T)
str(palabras_ordenadas_x_ocurrencia)
palabras_ordenadas_x_ocurrencia[1:25]
palabras_ordenadas_x_ocurrencia[[1,1]]
palabras_ordenadas_x_ocurrencia[[1]]
palabras_ordenadas_x_ocurrencia[[2]]
palabras_ordenadas_x_ocurrencia[[2]][[1]]
palabras_ordenadas_x_ocurrencia[[2]][[2]]
palabras_ordenadas_x_ocurrencia[[2,2]]
palabras_ordenadas_x_ocurrencia[[,2]]
palabras_ordenadas_x_ocurrencia[[2]]
palabras_ordenadas_x_ocurrencia[[1]]
palabras_ordenadas_x_ocurrencia[1]
palabras_ordenadas_x_ocurrencia[1][1]
palabras_ordenadas_x_ocurrencia[1][2]
palabras_ordenadas_x_ocurrencia[1][0]
str(palabras_ordenadas_x_ocurrencia)
rm(palabras)
tot_palabras <- c(strsplit(quijote[37:37862],"[ ,;-]"),recursive=T)
tot_palabras[1:100]
palabras_ordenadas_x_ocurrencia <- sort(table(tot_palabras),vars=2,decreasing=T)
str(palabras_ordenadas_x_ocurrencia)
palabras_ordenadas_x_ocurrencia["tot_palabras"][1:25]
palabras_ordenadas_x_ocurrencia[1:25]["tot_palabras"]
palabras_ordenadas_x_ocurrencia[1:25][1]
palabras_ordenadas_x_ocurrencia[1:25][1:10]
palabras_ordenadas_x_ocurrencia[1:25]
palabras_ordenadas_x_ocurrencia[1:25][1:10]
str(palabras_ordenadas_x_ocurrencia[1:25])
palabras_ordenadas_x_ocurrencia["tot_palabras"]
palabras_ordenadas_x_ocurrencia[1,"tot_palabras"]
palabras_ordenadas_x_ocurrencia[1:25]
1:25
palabras_ordenadas_x_ocurrencia[1:25](1)
palabras_ordenadas_x_ocurrencia[1:25][[1][]]
palabras_ordenadas_x_ocurrencia[1:25][[1]]
palabras_ordenadas_x_ocurrencia[1:25][[2]]
palabras_ordenadas_x_ocurrencia[1:25][[0]]
palabras_ordenadas_x_ocurrencia[1:25][1]
palabras_ordenadas_x_ocurrencia[1:25][]
?array
palabras_ordenadas_x_ocurrencia[1,1]
str(palabras_ordenadas_x_ocurrencia)
array(palabras_ordenadas_x_ocurrencia)
str(array(palabras_ordenadas_x_ocurrencia))
str(matrix(palabras_ordenadas_x_ocurrencia,nrow=2))
str(matrix(palabras_ordenadas_x_ocurrencia,ncol=2))
str(matrix(palabras_ordenadas_x_ocurrencia))
table(palabras_ordenadas_x_ocurrencia[palabras],palabras_ordenadas_x_ocurrencia[1])[1:25]
palabras <- c(strsplit(quijote[37:37862],"[ ,;-]"),recursive=T)
palabras[1:100]
palabras_ordenadas_x_ocurrencia <- sort(table(palabras),vars=2,decreasing=T)
str(palabras_ordenadas_x_ocurrencia)
palabras_ordenadas_x_ocurrencia[1:25][]
palabras_ordenadas_x_ocurrencia[1:25]
table(palabras_ordenadas_x_ocurrencia[palabras],palabras_ordenadas_x_ocurrencia[1])[1:25]
?order
?unlist
str(unlist(palabras))
str(unlist(palabras_ordenadas_x_ocurrencia))
str(palabras_ordenadas_x_ocurrencia)
str(unlist(palabras_ordenadas_x_ocurrencia))
?length
names(palabras_ordenadas_x_ocurrencia)
length(names(palabras_ordenadas_x_ocurrencia))
strlength(names(palabras_ordenadas_x_ocurrencia))
strwidth(names(palabras_ordenadas_x_ocurrencia))
len(names(palabras_ordenadas_x_ocurrencia))
?char
??char
?nchar
nchar(names(palabras_ordenadas_x_ocurrencia))
nchar("123")
table(nchar(names(palabras_ordenadas_x_ocurrencia)),palabras_ordenadas_x_ocurrencia)
table(palabras_ordenadas_x_ocurrencia,nchar(names(palabras_ordenadas_x_ocurrencia)))
palabras_ordenadas_x_ocurrencia[1:25]
largo_vs_frecuencia <- table(palabras_ordenadas_x_ocurrencia,nchar(names(palabras_ordenadas_x_ocurrencia)))
fix(largo_vs_frecuencia)
largo_vs_frecuencia <- data.frame(table(palabras_ordenadas_x_ocurrencia,nchar(names(palabras_ordenadas_x_ocurrencia))))
View(largo_vs_frecuencia)
table(palabras_ordenadas_x_ocurrencia[1:25],nchar(names(palabras_ordenadas_x_ocurrencia[1:25])))
palabras_ordenadas_x_ocurrencia[1:25]
palabras_ordenadas_x_ocurrencia[1:50]
table(palabras_ordenadas_x_ocurrencia[1:50],nchar(names(palabras_ordenadas_x_ocurrencia[1:50])))
nchar(names(palabras_ordenadas_x_ocurrencia))
table(nchar(names(palabras_ordenadas_x_ocurrencia)))
names(palabras_ordenadas_x_ocurrencia)
names(palabras_ordenadas_x_ocurrencia)[nchar(names(palabras_ordenadas_x_ocurrencia))>20]
palabras <- c(strsplit(quijote[37:37490],"[ ,;-]"),recursive=T)
palabras[1:100]
palabras_ordenadas_x_ocurrencia <- sort(table(palabras),vars=2,decreasing=T)
palabras_ordenadas_x_ocurrencia[1:50]
table(palabras_ordenadas_x_ocurrencia[1:50],nchar(names(palabras_ordenadas_x_ocurrencia[1:50])))
names(palabras_ordenadas_x_ocurrencia)[nchar(names(palabras_ordenadas_x_ocurrencia))>20]
table(nchar(names(palabras_ordenadas_x_ocurrencia)))
names(palabras_ordenadas_x_ocurrencia)[nchar(names(palabras_ordenadas_x_ocurrencia))=21]
names(palabras_ordenadas_x_ocurrencia)[nchar(names(palabras_ordenadas_x_ocurrencia))==21]
table(palabras_ordenadas_x_ocurrencia[1:50],nchar(names(palabras_ordenadas_x_ocurrencia[1:50])))
palabras_ordenadas_x_ocurrencia[1:50]
palabras <- c(strsplit(quijote[37:37490],"[[[:punct:][:space:]]"),recursive=T)
str(quijote)
table(palabras_ordenadas_x_ocurrencia[1:50],nchar(names(palabras_ordenadas_x_ocurrencia[1:50])))
?table
table(palabras_ordenadas_x_ocurrencia,nchar(names(palabras_ordenadas_x_ocurrencia)))
names(palabras_ordenadas_x_ocurrencia)[nchar(names(palabras_ordenadas_x_ocurrencia))==21]
setwd("C:/desa/cursoR/scripts")
vector.pos <- function(k){
retval <- c(1:3)
for(i in c(1:(k-3))){
largo <- length(retval)
retval <- c(retval,retval[(largo-2):largo] + c(1,1,1))
}
return(retval)
}
cuales <- vector.pos(100)
cuales
vector.pos <- function(k){
retval <- c(1:3)
largo <- 3
for(i in c(1:(k-3))){
retval <- c(retval,retval[(largo-2):largo] + c(1,1,1))
largo <- largo + 3
}
return(retval)
}
cuales <- vector.pos(100)
cuales
rep(c(1,2,3),11,l=31)
rep(c(1,2,3),11,l=31) +(0,1,2)
rep(c(1,2,3),11,l=31)
rep(c(1,2,3),11,l=31) + rep(c(1,2,3),11,l=31)
rep(c(1,2,3),11,l=31) + ((1,2,3) +rep(c(1,2,3),11,l=29) )
rep(c(1,2,3),11,l=29)
((1,2,3) +rep(c(1,2,3),11,l=29)
rep(c(1,2,3),11,l=31) + (C(1,2,3) +rep(c(1,2,3),11,l=29) )
STR(rep(c(1,2,3),11,l=31))
str(rep(c(1,2,3),11,l=31))
rep(c(1,2,3),11,l=31) + (c(1,2,3) +rep(c(1,2,3),11,l=29) )
rep(c(1,2,3),11,l=31) + (c(1,2,3) +rep(c(0,1,2),11,l=29) )
rep(c(1,2,3),11,l=31) + (c(0,0,0) +rep(c(0,1,2),11,l=29) )
rep(c(1,2,3),11,l=31) + rep(c(0,1,2),11,l=31)
rep(c(1,2,3),11,l=31)
cuales <- vector.pos(100)
cuales
x <- rep(c(1,2,3),11,l=31)
x
x[-1]
x[[-1]]
x[length(x)]
f <- function(x){
append(x,c(x[length(x)-1],x[length(x)-1]+1,x[length(x)-1]+2))
}
f(123)
f(c(1,2,3))
f(f(f(f(f(f(f(f(f(c(1,2,3))))))))))
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(c(1,2,3)))))))))))))))))))))))))))
cuales
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(
c(1,2,3)
))))))))))))))))))))))))))))))))))))))))))))))))))))
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(
c(1,2,3)
))))))))))))))))))))))))))))))))))))))))))))))))))))
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(  c(1,2,3) ))))))))))))))))))))))))))))))))))))))))))))))))))))
f(c(1,2,3) )
?tapply
tapply(c(1,2,3),f)
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( c(1,2,3) ))))))))))))))))
f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( c(1,2,3) )))))))))))))))
x <- f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( c(1,2,3) )))))))))))))))
x <- f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( x )))))))))))))))
x
x <- f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( x )))))))))))))))
x <- f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( x )))))))))))))))
x <- f(f(f(f(f(f(f(f(f(f(f(f(f(f(f( x )))))))))))))))
x
x <- c(1,2,3)
for(i in 1:100) x <- f(x)
x
x <- c(1,2,3)
for(i in 1:97) x <- f(x)
x
x <- c(1,2,3)
for(i in 1:97) x <- f(x)
cuales <- x
tri_1 <- matrix(oraciones.palabras[[1]][c(cuales)[1:((length(oraciones.palabras[[1]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[1]])-2,byrow=T)
frase2 <- "Llegó a la conclusión que aquel hijo por quien ella habría dado la vida era, simplemente, un hombre incapacitado para el amor. Una noche, cuando lo tenía en el vientre, lo oyó llorar. Fue un lamento tan definido, que Jose Arcadio Buendía despertó a su lado y se alegró con la idea de que el niño iba a ser ventrílocuo. Otras personas pronosticaron que sería adivino. Ella, en cambio, se estremeció con la certidumbre de que aquel bramido profundo era un primer indicio de la temible cola de chancho. Pero la lucidez de la decrepitud le permitió ver, y así lo repitió muchas veces, que el llanto de los niños en el vientre de la madre no es augurio de ventriloquía ni facultad adivinatoria, sino una señal inequívoca de incapacidad para el amor."
strsplit(frase2,"[[:punct:]]")
frase2 <- gsub(",", "", frase2)
frase2 <- gsub("[.][ ]", ".", frase2)
oraciones <- strsplit(frase2,"[[:punct:]]")
str(oraciones)
oraciones.palabras <- strsplit(oraciones[[1]],"[[:space:]]")
str(oraciones.palabras)
tri.b <- matrix(oraciones.palabras[[1]][c(cuales)[1:((length(oraciones.palabras[[1]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[1]])-2,byrow=T)
for (i in c(2:length(oraciones.palabras))){
tri.b <- rbind(tri.b,  matrix(oraciones.palabras[[i]][c(cuales)[1:((length(oraciones.palabras[[i]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[i]])-2,byrow=T))
}
View(tri.b)
tri_1
tri_1 <- matrix(oraciones.palabras[[1]][c(cuales)[1:((length(oraciones.palabras[[1]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[1]])-2,byrow=T)
tri_1
oraciones.palabras[[1]]
tris <- function(palabras){
largo <- length(palabras[[1]])
matrix(palabras[[1]][c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
tri_1 <- tris(oraciones.palabras)
tri_1
tri_2 <- matrix(oraciones.palabras[[2]][c(cuales)[1:((length(oraciones.palabras[[2]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[2]])-2,byrow=T)
tri_2
tri_1 <- matrix(oraciones.palabras[[1]][c(cuales)[1:((length(oraciones.palabras[[1]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[1]])-2,byrow=T)
tri_1
tris <- function(palabras,i){
largo <- length(palabras[[i]])
matrix(palabras[[i]][c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
tri_1 <- tris(oraciones.palabras,1)
tris(oraciones.palabras,c(1,2))
tris(oraciones.palabras,1:2))
tris(oraciones.palabras,1:2)
tri_1 <- tris(oraciones.palabras,1)
tri_1
tri.b <- tris(oraciones.palabras,1)
for (i in c(2:length(oraciones.palabras))){
tri.a <- rbind(tri.a, trisoraciones.palabras,i )
}
tri.b <- tris(oraciones.palabras,1)
for (i in c(2:length(oraciones.palabras))){
tri.b <- rbind(tri.b, trisoraciones.palabras,i )
}
tri.b <- tris(oraciones.palabras,1)
for (i in c(2:length(oraciones.palabras))){
tri.b <- rbind(tri.b, tris(oraciones.palabras,i ))
}
tri.a <- matrix(oraciones.palabras[[1]][c(cuales)[1:((length(oraciones.palabras[[1]])-2)*3)]] , ncol=3 , nrow=length(oraciones.palabras[[1]])-2 , byrow=T)
for (i in c(2:length(oraciones.palabras))){
tri.a <- rbind(tri.a,  matrix(oraciones.palabras[[i]][c(cuales)[1:((length(oraciones.palabras[[i]])-2)*3)]],ncol=3,nrow=length(oraciones.palabras[[i]])-2,byrow=T))
}
View(tri.b)
tris(oraciones.palabras,1:2)
tris(oraciones.palabras,c(1,2))
tris(oraciones.palabras,c(c(1,2)))
tris(oraciones.palabras,c(1,2))
oraciones.palabras[[c(1,2)]]
oraciones.palabras[[c(1,2)]]
oraciones.palabras[c(1,2)]
oraciones.palabras[1]
oraciones.palabras[[1]]
tris <- function(palabras,i){
largo <- length(palabras[[i]])
#matrix(palabras[[i]][c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
matrix(palabras[i][c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
tri_1 <- tris(oraciones.palabras,1)
View(tri_1)
tris_ <- function(palabras){
largo <- length(palabras[[i]])
matrix(palabras[c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
lapply(oraciones.palabras, tris_)
tri_1 <- tris(oraciones.palabras[[1]])
tris_ <- function(palabras){
largo <- length(palabras)
matrix(palabras[c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
tri_1 <- tris_(oraciones.palabras[[1]])
tri_1
lapply(oraciones.palabras, tris_)
f <- function(x){
append(x,c(x[length(x)-1],x[length(x)-1]+1,x[length(x)-1]+2))
}
cuales <- c(1,2,3)
for(i in 1:97) cuales <- f(cuales)
# vamos a ver si somos capaces de construir los trigramas (todos) que contiene. De tener éxito, intentaremos hacer lo mismo con un texto algo más complejo,
frase2 <- "Llegó a la conclusión que aquel hijo por quien ella habría dado la vida era, simplemente, un hombre incapacitado para el amor. Una noche, cuando lo tenía en el vientre, lo oyó llorar. Fue un lamento tan definido, que Jose Arcadio Buendía despertó a su lado y se alegró con la idea de que el niño iba a ser ventrílocuo. Otras personas pronosticaron que sería adivino. Ella, en cambio, se estremeció con la certidumbre de que aquel bramido profundo era un primer indicio de la temible cola de chancho. Pero la lucidez de la decrepitud le permitió ver, y así lo repitió muchas veces, que el llanto de los niños en el vientre de la madre no es augurio de ventriloquía ni facultad adivinatoria, sino una señal inequívoca de incapacidad para el amor."
strsplit(frase2,"[[:punct:]]")
frase2 <- gsub(",", "", frase2)
frase2 <- gsub("[.][ ]", ".", frase2)
oraciones <- strsplit(frase2,"[[:punct:]]")
oraciones.palabras <- strsplit(oraciones[[1]],"[[:space:]]")
tris_ <- function(palabras){
largo <- length(palabras)
matrix(palabras[c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
v_trigramas <- lapply(oraciones.palabras, tris_)
View(v_trigramas)
as.data.frame(v_trigramas)
v_trigramas
f <- function(x){
append(x,c(x[length(x)-1],x[length(x)-1]+1,x[length(x)-1]+2))
}
cuales <- c(1,2,3)
for(i in 1:97) cuales <- f(cuales)
cuales
frase2 <- "Llegó a la conclusión que aquel hijo por quien ella habría dado la vida era, simplemente, un hombre incapacitado para el amor. Una noche, cuando lo tenía en el vientre, lo oyó llorar. Fue un lamento tan definido, que Jose Arcadio Buendía despertó a su lado y se alegró con la idea de que el niño iba a ser ventrílocuo. Otras personas pronosticaron que sería adivino. Ella, en cambio, se estremeció con la certidumbre de que aquel bramido profundo era un primer indicio de la temible cola de chancho. Pero la lucidez de la decrepitud le permitió ver, y así lo repitió muchas veces, que el llanto de los niños en el vientre de la madre no es augurio de ventriloquía ni facultad adivinatoria, sino una señal inequívoca de incapacidad para el amor."
# limpio un poco
frase2 <- gsub(",", "", frase2)
frase2 <- gsub("[.][ ]", ".", frase2)
oraciones <- strsplit(frase2,"[[:punct:]]")
oraciones <- strsplit(frase2,"[[:punct:]]")
oraciones.palabras <- strsplit(oraciones[[1]],"[[:space:]]")
tris_ <- function(palabras){
largo <- length(palabras)
matrix(palabras[c(cuales)[1:((largo-2)*3)]],ncol=3,nrow=largo-2,byrow=T)
}
oraciones
oraciones.palabras
v_trigramas <- lapply(oraciones.palabras, tris_)
v_trigramas
